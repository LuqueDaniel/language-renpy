'.source.renpy':
  '(Py) #!/usr/bin/env python':
    'prefix': 'env'
    'body': '#!/usr/bin/env python\n'
  '(Py) # coding=utf-8':
    'prefix': 'enc'
    'body': '# coding=utf-8\n'
  '(Py) Assert Equal':
    'prefix': 'ase'
    'body': 'self.assertEqual(${1:expected}, ${2:actual}${3:, \'${4:message}\'})$0'
  '(Py) Assert Not Equal':
    'prefix': 'asne'
    'body': 'self.assertNotEqual(${1:expected}, ${2:actual}${3:, \'${4:message}\'})$0'
  '(Py) Assert Raises':
    'prefix': 'asr'
    'body': 'self.assertRaises(${1:exception}, ${2:callable})$0'
  '(Py) Assert True':
      'prefix': 'ast'
      'body': 'self.assertTrue(${1:actual}${2:, \'${3:message}\'})$0'
  '(Py) Assert False':
     'prefix': 'asf'
     'body': 'self.assertFalse(${1:actual}${2:, \'${3:message}\'})$0'
  '(Py) Assert Is':
     'prefix': 'asi'
     'body': 'self.assertIs(${1:expected}, ${2:actual}${3:, \'${4:message}\'})$0'
  '(Py) Assert Is Not':
     'prefix': 'asint'
     'body': 'self.assertIsNot(${1:expected}, ${2:actual}${3:, \'${4:message}\'})$0'
  '(Py) Assert Is None':
     'prefix': 'asino'
     'body': 'self.assertIsNone(${1:actual}${2:, \'${3:message}\'})$0'
  '(Py) Assert Is Not None':
     'prefix': 'asinno'
     'body': 'self.assertIsNotNone(${1:actual}${2:, \'${3:message}\'})$0'
  '(Py) Assert In':
     'prefix': 'asin'
     'body': 'self.assertIn(${1:needle}, ${2:haystack}${3:, \'${4:message}\'})$0'
  '(Py) Assert Not In':
     'prefix': 'asni'
     'body': 'self.assertNotIn(${1:needle}, ${2:haystack}${3:, \'${4:message}\'})$0'
  '(Py) Assert':
    'prefix': 'as'
    'body': 'self.assert_(${1:boolean expression}${2:, \'${3:message}\'})$0'
  '(Py) Fail (a test)':
    'prefix': 'fail'
    'body': 'self.fail(\'${1:message}\')$0'
  '(Py) New Class':
    'prefix': 'class'
    'body': 'class ${1:ClassName}(${2:object}):\n\t"""${3:docstring for $1}"""\n\tdef __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.arg = arg\n\t\t$0'
  '(Py) New Method':
    'prefix': 'defs'
    'body': 'def ${1:mname}(self, ${2:arg}):\n\t${3:pass}'
  '(Py) New Function':
    'prefix': 'def'
    'body': 'def ${1:fname}(${2:arg}):\n\t${3:pass}'
  '(Py) New Property':
    'prefix': 'property'
    'body': 'def ${1:foo}():\n    doc = "${2:The $1 property.}"\n    def fget(self):\n        ${3:return self._$1}\n    def fset(self, value):\n        ${4:self._$1 = value}\n    def fdel(self):\n        ${5:del self._$1}\n    return locals()\n$1 = property(**$1())$0'
  '(Py) if':
    'prefix': 'if'
    'body': 'if ${1:condition}:\n\t${2:pass}'
  '(Py) for':
    'prefix': 'for'
    'body': 'for ${1:value} in ${2:variable}:\n\t${3:pass}'
  '(Py) while':
    'prefix': 'while'
    'body': 'while ${1:condition}:\n\t${2:pass}'
  '(Py) Try/Except/Else/Finally':
    'prefix': 'try'
    'body': 'try:\n\t${1:pass}\nexcept${2: ${3:Exception} as ${4:e}}:\n\t${5:raise}\nelse:\n\t${6:pass}\nfinally:\n\t${7:pass}'
  '(Py) Try/Except/Else':
    'prefix': 'try'
    'body': 'try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${5:pass}'
  '(Py) Try/Except/Finally':
    'prefix': 'try'
    'body': 'try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${5:pass}'
  '(Py) Try/Except':
    'prefix': 'try'
    'body': 'try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}'
  '(Py) List Comprehension':
    'prefix': 'lc'
    'body': '[${1:value} for ${2:value} in ${3:variable}]'
  '(Py) List Comprehension If Else':
    'prefix': 'lcie'
    'body': '[${1:value} if ${2:condition} else ${3:condition} for ${4:value} in ${5:variable}]'
  '(Py) Dictionary Comprehension':
    'prefix': 'dc'
    'body': '{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:variable}}'
  '(Py) PDB set trace':
    'prefix': 'pdb'
    'body': 'import pdb; pdb.set_trace()\n'
  '(Py) iPDB set trace':
    'prefix': 'ipdb'
    'body': 'import ipdb; ipdb.set_trace()\n'
  '(Py) __magic__':
    'prefix': '__'
    'body': '__${1:init}__'
  '(Py) if __name__ == \'__main__\'':
    'prefix': 'ifmain'
    'body': 'if __name__ == \'__main__\':\n\t${1:main()}$0'
## Renpy Snippets
  'Choice Menu':
    'prefix': 'menu'
    'body': 'menu ${1:optionalName}:\n\t"${2:Say Statement}"\n\t"${3:Choice 1}":\n\t\t#block of code to run\n\t"${4:Choice 2}":\n\t\t#block of code to run'
  'Label':
    'prefix': 'label'
    'body': 'label ${1:labelName}:\n\t${2:}'
  'One Line Python':
    'prefix': '1py'
    'body': '$ ${1:#python statements}'
  '1 Line Python':
    'prefix': '$'
    'body': '$ ${1:#python statements}'
  'Python in Block':
    'prefix': 'python'
    'body': 'python:\n\t${1:}'
  '($) Movie Cutscene (All Plataforms)':
    'prefix': 'cutscene'
    'body': '$ renpy.movie_cutscene(\'${1:fileName.extension}\')'
  '[$] Save Persistent (All Plataforms)':
    'prefix': 'persist'
    'body': '$ persistent.${1:valueName} = ${2:#variable}'
  '[@] Create MultiPersistent (Only PC)':
    'prefix': 'MultiPersistent'
    'body': '${1:persistentName} = MultiPersistent("${2:persistentFileName}")'
  '[$] Save MultiPersistent (Only PC)':
    'prefix': 'SaveMulti'
    'body': '$ ${1:persistentName}.save()'
  'Ren\'Py Docs':
    'prefix': 'dochelp'
    'body': '## Visit the site for documentation or help of Ren\'Py engine. ##\n## Documentation:\n\t"${1:http://www.renpy.org/doc/html/}"\n## Wiki-Old Documentation:\n\t"${2:http://www.renpy.org/wiki/renpy/Wiki_Home_Page}"\n## Forum:\n\t"${3:http://lemmasoft.renai.us/forums/viewforum.php?f=42}"\n\n## Warning: All snippets that start with (Py) are for Python commands and ($) are for One Line Python.'
  '秘密':
    'prefix': 'ひみつ'
    'body': '"使用このいただきありがとうございます。"'
'.source.renpy:not(.string)':
  'self':
    'prefix': '.'
    'body': 'self.'
